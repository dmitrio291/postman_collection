{
	"info": {
		"_postman_id": "f45f1782-b9c0-49d0-9c90-fa5ce2645663",
		"name": "SWAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9608431"
	},
	"item": [
		{
			"name": "tests",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", () => {\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"// 2. We have all the declared fields in the response\r",
							"pm.test(\"Check that we have all declared fields\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"// 3. Field value isn't NULL\r",
							"pm.test(\"Check if value isn't NULL\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							"});\r",
							"\r",
							"// 4. Check if value isn't empty\r",
							"pm.test(\"Check if value isn't empty\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"});\r",
							"\r",
							"// 5. Check if field corresponds to a specific value\r",
							"pm.test(\"Check if field corresponds to a specific value\", () => {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							"});\r",
							"\r",
							"// 6. Status code is 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 7. Status message is ok\r",
							"pm.test(\"Status message is ok\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"// 8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// 9. There is a specific header in the response\r",
							"pm.test(\"There is a specific header in the response\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// 10. The response has a specific header with a specific value\r",
							"pm.test(\"The response has a specific header with a specific value\", () => {\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 11. Cookie exists\r",
							"pm.test(\"Cookie exists\", () => {\r",
							"    pm.cookies.has(\"_cfduid\");\r",
							"});\r",
							"\r",
							"// 12. Cookie has value\r",
							"pm.test(\"Cookie has value\", () => {\r",
							"    try {\r",
							"        const MY_COOKIE = pm.cookies.get(\"_cfduid\");\r",
							"        console.log(MY_COOKIE);\r",
							"    } catch(e) {\r",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" + e);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "tiny Validator JSON Schema 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = JSON.parse(responseBody);\r",
							"\r",
							"const schema = {\r",
							"    // specify the type of object\r",
							"    \"type\": \"object\",\r",
							"    // specify requires properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    // describe the properties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\":\"string\"},\r",
							"        \"planets\": {\"type\":\"string\"},\r",
							"        \"films\": {\"type\":\"string\"},\r",
							"        \"species\": {\"type\":\"string\"},\r",
							"        \"vehicles\": {\"type\":\"string\"},\r",
							"        \"starships\": {\"type\":\"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Body is correct', () => {\r",
							"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "tiny Validator JSON Schema 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = JSON.parse(responseBody);\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"property\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"species\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"starships\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        }\r",
							"    }  \r",
							"}\r",
							"\r",
							"pm.test('Body is correct', () => {\r",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		}
	]
}